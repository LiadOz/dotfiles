snippet obph "Define ostream overload" b
ostream& operator<<(ostream& out, const ${1:object}& ${2:o});
endsnippet

snippet obpc "Implement ostream overload" b
ostream& operator<<(ostream& out, const ${1:object}& ${2:o}){
	return out << $3;
}
endsnippet
	
snippet cmpb "Base for competition" b
#include <iostream>
#include <cmath>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
typedef long long ll;
using namespace std;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	$1
}
endsnippet

snippet cmp2v "Competition Question" b
int ${1:t}, ${2:n}, ${3:k};
cin >> $1;
while ($1--) {
	cin >> $2 >> $3;
	$4
}
endsnippet

snippet cmpin "Competition input"
int ${1:T};
cin >> $1;
for (int ${2:t} = 0; $2 < $1; ++$2){
	$4
}
endsnippet

snippet inp "Get input"
${1:int} ${2:num};
cin >> $2;
$3
endsnippet

snippet printmat "Print Matrix" b
for (int row = 0; row < ${1:n}; ++i) {
	for (int col = 0; col < $1; ++j) {
		cout << ${2:a}[row][col] << " ";
	} 
	cout << endl;
}
$3
endsnippet

snippet print2v "Print vector of vectors" b
for (auto& v: ${1:vv}) {
	for (auto& element : v) {
		cout << element << " ";
	} 
	cout << endl;
}
$3
endsnippet

snippet dfs "Simple dfs traversal" b
vector<vector<int>> g; vector<bool> visible;
void dfs(int cur){
	visible[cur] = true;
	for(int s : g[cur]){
		if(visible[s]) continue;
		dfs(s);
	}
}
endsnippet

snippet bfs "simple bfs traversal" b
vector<vector<int>> g; vector<bool> visible;
void bfs(vector<int>& starts){
	for (auto i : starts) {
		visible[i] = true;
	}
	vector<int> cur_level = starts;
	int dist = 0;
	while(!cur_level.empty()){
		vector<int> next_level;
		for (int f : cur_level){
			// iterate through sons
			for (int s : g[f]){
				if (visible[s]) continue;
				visible[s] = true;
				next_level.push_back(s);
			}
		}
		cur_level = next_level;
		dist++;
	}
}
endsnippet

snippet printjam "Standrad print for code jam" b
cout << "Case #" << ${1:t} << ": " << ${2:result} << endl;
endsnippet

snippet dick "dijkstra algorithm" b
const int INF = 1e9 + 19;

int n, m;
#define SUM ll
using pp = pair<SUM, int>; // the type of distance is the first one
vector<vector<pair<int, SUM>>> g; // the graph
vector<int> p; // node parent in dijkstra
vector<SUM> d;

// dijkstra copmlexity ElogV
void dijkstra(int s) {
	d.assign(n+10, INF);
	p.assign(n+10, -1);

	d[s] = 0;
	priority_queue<pp, vector<pp>, greater<pp>> q;
	q.push({0, s});
	while (!q.empty()) {
		int v = q.top().second;
		auto d_v = q.top().first;
		q.pop();
		if (d_v != d[v])
			continue;

		for (auto edge : g[v]) {
			int to = edge.first;
			auto len = edge.second;

			if (d[v] + len < d[to]) {
				d[to] = d[v] + len;
				p[to] = v;
				q.push({d[to], to});
			}
		}
	}
}

vector<int> get_path(int from, int to){
	vector<int> final_path;
	for (int i = to; i != from; i = p[i]) 
		final_path.push_back(i);
	final_path.push_back(from);
	reverse(final_path.begin(), final_path.end());
	return final_path;
}
endsnippet
	
snippet top_sort "topological sort" b
vector<vector<int>> g; vector<bool> visible;
vector<int> sorted;
void dfs(int cur){
	visible[cur] = true;
	for(int s : g[cur]){
		if(visible[s]) continue;
		dfs(s);
	}
	sorted.push_back(cur);
}

void top_sort(int n){
	visible.assign(n, false);
	sorted.clear();
	for (int i = 0; i < n; ++i) {
		if(visible[i]) continue;
		dfs(i);
	}
	reverse(sorted.begin(), sorted.end());
}
endsnippet

snippet bellman "Bellman Ford" b
const int INF = 1e9 + 19;

vector<vector<pair<int, int>>> g;
vector<int> d;
vector<bool> loop;
bool bellmanFord(int start){
	d.assign(g.size()+1, INF);
	d[start] = 0;
	bool cycle;
	for (size_t i = 0; i <= g.size()+1; ++i) {
		cycle = false;
		loop.assign(g.size() + 1, false);
		for (size_t u = 0; u < g.size(); ++u) {
			for (auto v : g[u]) {
				if(d[u] != INF && d[v.first] > d[u] + v.second){
					d[v.first]=d[u] + v.second;
					loop[v.first]=true;
					loop[u]=true;
					cycle=true;
				}
			}
		}
	}
	return cycle;
}
endsnippet

snippet war "Floyd-Warshall" b
const int INF = 1e9 + 19;
vector<vector<int>> d; // in init d[i][j] = INF and d[i][i] = min(d[i][i], 0)
void floyd_warshall(){
	for (size_t k = 0; k < d.size(); ++k)
		for (size_t i = 0; i < d.size(); ++i)
			for (size_t j = 0; j < d.size(); ++j)
				if(d[i][k] < INF && d[k][j] < INF)
					d[i][j] = min(d[i][j], d[i][k]+d[k][j]);
}
int fw_distance_with_inf(int source, int target){
	for (size_t k = 0; k < d.size(); ++k)
		if(d[k][k] < 0 && d[source][k] < INF && d[k][target] < INF)
			return -INF;
	return d[source][target];
}
endsnippet
