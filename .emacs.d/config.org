#+TITLE: Emacs Configuration
#+description: Global config file
* Core
** Startup Benchmark
#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

(add-hook 'after-init-hook
    (lambda () (message "loaded in %s" (emacs-init-time))))
#+END_SRC
** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode))
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

** General (Keybinding Package)
create keybindings
#+begin_src emacs-lisp
  (use-package general :ensure t
    :config
    (general-override-mode))

  (defconst leader-key "SPC")
  (defconst leader-key-alt "C-SPC")
  (defconst minor-leader-key ",")
  (defconst minor-leader-key-alt "C-,")

  (general-create-definer main-definer
    :states '(normal visual insert emacs)
    :keymaps 'override
    :prefix leader-key
    :non-normal-prefix leader-key-alt)

  (general-create-definer minor-definer
    :states '(normal visual insert emacs)
    :prefix minor-leader-key
    :non-normal-prefix minor-leader-key-alt)
  (general-define-key
   "TAB" 'self-insert-command)
  (main-definer
   "TAB"	'mode-line-other-buffer
   "c"	(general-simulate-key "C-c")
   "h"	(general-simulate-key "C-h")
   "u"	(general-simulate-key "C-u")
   "x"	(general-simulate-key "C-x")

   "s"	'shell

   "t"	'(:ignore t :which-key "Toggles")
   "tt"	'(undo-tree-visualize :wk "Undo Tree")
   "tf"	'(toggle-frame-fullscreen :wk "Fullscreen")
   "tF"	'auto-fill-mode
   "ts"	'(text-scale-adjust :wk "Font Size")

   ";"	'(:ignore t :which-key "Untitled")
   ";c"	'comment-line

   "b"	'(:ignore t :which-key "Buffers")
   "bb"	'switch-to-buffer
   "bd"	'kill-this-buffer
   "bD"	'kill-buffer
   "bB" 	'switch-to-buffer
   "b]"	'next-buffer
   "b["	'previous-buffer
   "w"	'(:ignore t :which-key "Window")
   "ws"	'(split-window-vertically :which-key "Split V")
   "wv"	'(split-window-horizontally :which-key "Split H")
   "wq"	'(quit-window :which-key "Close Window")
   "f"	'(:ignore t :which-key "Files")
   "fD"	'(delete-file :which-key "Delete")
   "fR"	'(rename-file :which-key "Rename"))

  (minor-definer
   :keymaps 'org-mode-map
   "'"	'org-edit-special
   "c"	'org-ctrl-c-ctrl-c
   "t"	'org-todo
   )
  (minor-definer
   :keymaps 'org-src-mode-map
   "'"  'org-edit-src-exit
   )
  (minor-definer
   :keymaps 'shell-mode-map
   "C-p"  'comint-previous-prompt
   "C-n"	'comint-next-prompt
   )
#+end_src

** Auto Complete
#+Begin_SRC emacs-lisp 
  ;(use-package auto-complete
  ;  :ensure t
  ;  :config
  ;  (ac-config-default))
#+END_SRC
Company
#+begin_src emacs-lisp
  (use-package company :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
  (use-package company-statistics :ensure t
    :config (company-statistics-mode))
  (use-package company-quickhelp :ensure t
    :config (company-quickhelp-mode))
#+end_src

** Helm
#+Begin_SRC emacs-lisp 
  (use-package helm
    :ensure t
    :general
    (main-definer
      "ff" '(helm-find-files :wk "Find File")
      "bb"'(helm-mini :wk "Change Buffer")

      "a" '(helm-M-x :wk "Apropos"))
    :config
    (setq-default helm-boring-buffer-regexp-list
		  '("\\` " "\\`\\*helm" "\\`\\*Echo Area" "\\`\\*Minibuf"
		    "\\`\\*Messages*" "\\`\\*Backtrace*" "\\`\\*Help*"
		    "\\`\\*dashboard*" "\\`\\*anaconda-mode*" "\\`\\*tide-server*"
		    "\\`\\magit"))
    (helm-mode 1))
#+END_SRC

#+RESULTS:

Manage projects easily, [[tuhdo.github.io/helm-projectile.html][guide]].
#+Begin_SRC emacs-lisp 
  (use-package helm-projectile :ensure t
    :general
    (main-definer
      "p"		'(:ignore t :which-key "Projects")
      "pp"	'(helm-projectile-switch-project :wk "Switch Project")
      "pf"	'(helm-projectile-find-file :wk "Find File")
      "pF"	'(helm-projectile-find-file-in-known-projects
		    :wk "Find In All Projects")
      "pb"	'(helm-projectile-switch-to-buffer :wk "Switch Buffer")
      "pe"	'(helm-projectile-recentf :wk "Recent Files")
      "pg"	'(helm-projectile-grep :wk "grep Project"))
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (helm-projectile-on))
#+END_SRC
Company
#+begin_src emacs-lisp
  (use-package helm-company :ensure t
    :general
    ("C-;" 'helm-company))
#+end_src
** Relative Line Numbers
Set line numbers to hybrid
#+BEGIN_SRC emacs-lisp
(add-hook 'conf-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(setq-default display-line-numbers-type 'relative)
#+END_SRC
** WSL Integeration
#+BEGIN_SRC emacs-lisp
(setq-default sysTypeSpecific  system-type) ;; get the system-type value
(cond 
 ;; If type is "gnu/linux", override to "wsl/linux" if it's WSL.
 ((eq sysTypeSpecific 'gnu/linux)  
  (when (string-match "Linux.*Microsoft.*Linux" 
                      (shell-command-to-string "uname -a"))

    (setq-default sysTypeSpecific "wsl/linux") ;; for later use.
    (setq
     cmdExeBin"/mnt/c/Windows/System32/cmd.exe"
     cmdExeArgs '("/c" "start" "") )
    (setq
     browse-url-generic-program  cmdExeBin
     browse-url-generic-args     cmdExeArgs
     browse-url-browser-function 'browse-url-generic)
    )))
#+END_SRC
** Org Mode
Settings for literate programming
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '(
			       (python . t)
			       ))
  (setq org-src-fontify-natively t
	org-latex-listings 'minted
	org-latex-packages-alist '(("" "minted"))
	org-confirm-babel-evaluate nil)
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "bibtex %b"
      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Other
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package avy :ensure t
    :general
    (main-definer
      "SPC" 'avy-goto-char-2))

  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode))

  (use-package evil-smartparens
    :ensure t
    :config
    (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

#+END_SRC
* Packages
** Code Editing
Syntax Checking
#+begin_src emacs-lisp
  (use-package flycheck :ensure t
    :config
    (defun disable-flycheck-mode()
      (flycheck-mode -1))
    (add-hook 'org-src-mode-hook 'disable-flycheck-mode)
    (global-flycheck-mode))
  (use-package flycheck-pos-tip :ensure t)
#+end_src
** YASnipet
Snippets engine for emacs.
use yas-describe-tables to view mode specific snippets.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet :ensure t
    :general
    (main-definer
      "y" 'yas-describe-tables)
    :config
    ;;(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-reload-all)
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

snippet package
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets :ensure t)
#+END_SRC
** Git
evil magit
#+begin_src emacs-lisp
  (use-package magit :ensure t
    :general
    (main-definer
      "m" 'magit-status))
#+end_src
git gutter

#+begin_src emacs-lisp
  (use-package git-gutter-fringe :ensure t
    :config
    (setq git-gutter-fr:side 'right-fringe)
    (global-git-gutter-mode))
#+end_src
** Python
Python default executable
#+begin_src emacs-lisp
  (setq python-shell-interpreter "python3")
#+end_src

Python Formatting (you must have yapf installed)
#+begin_src emacs-lisp
  (use-package yapfify :ensure t
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+end_src

Code completion
#+begin_src emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
  (use-package company-anaconda :ensure t
    :config (add-to-list 'company-backends 'company-anaconda))
#+end_src

Env setting
#+begin_src emacs-lisp
  (use-package pyvenv :ensure t)
#+end_src

Python mode keybindings
#+begin_src emacs-lisp
  (minor-definer
    :keymaps 'python-mode-map
    "p"	'run-python
    "a"	'pythonic-activate
    "r"	'python-shell-send-region
    "b"	'python-shell-send-buffer)
#+end_src

Python Inferior keybindings
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'inferior-python-mode-map
   "C-n"  'comint-next-input
   "C-p"  'comint-previous-input
   )
  (general-define-key
   :states '(normal visual insert emacs)
   :keymaps 'inferior-python-mode-map
   :prefix ","
   :non-normal-prefix "C-,"
   "h"    'comint-dynamic-list-input-ring
   "i"    'comint-interrupt-subjob
   "x"    'comint-send-eof
   )
#+end_src
** Solidity
  Solidity Mode
#+begin_src emacs-lisp
  (use-package solidity-mode
    :ensure t
    :init
    (setq solidity-flycheck-solc-checker-active t))
  (use-package solidity-flycheck
    :defer t
    :ensure t)
  (use-package company-solidity
    :ensure t
    :config
  (add-hook 'solidity-mode-hook
	  (lambda ()
	  (set (make-local-variable 'company-backends)
		  (append '((company-solidity company-capf company-dabbrev-code))
			  company-backends))))
    )
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
	   (typescript-mode . tide-hl-identifier-mode)
	   (before-save . tide-format-before-save)))
  (minor-definer
    :keymaps 'typescript-mode-map
    "v"	'tide-verify-setup
    "r"	'tide-refactor
    "f"	'tide-references
    "s"	'tide-rename-symbol)
#+end_src
** Other
Enforcing 80 characters in line for all buffers
#+BEGIN_SRC emacs-lisp 
  (use-package column-enforce-mode
    :ensure t
    :general
    (main-definer
      "tc" 'column-enforce-mode)
    :config
    (add-hook 'text-mode-hook 'column-enforce-mode)
    (add-hook 'prog-mode-hook 'column-enforce-mode)
    (setq column-enforce-column 80))
#+END_SRC

Used to export to pdf
#+BEGIN_SRC emacs-lisp 
;(use-package pdf-tools
;  :ensure t
;  :config
;  (pdf-tools-install))
#+END_SRC

Better package page
#+BEGIN_SRC emacs-lisp 
(use-package paradox
  :ensure t
  :config
  (paradox-enable))
#+END_SRC

anzu evil
#+begin_src emacs-lisp
  (use-package evil-anzu :ensure t
    :config
    (global-anzu-mode))
#+end_src

neotree
#+begin_src emacs-lisp
  (use-package neotree :ensure t
    :general
    (main-definer
      "n" 'neotree-toggle)
    (general-define-key
      :states '(normal visual insert emacs)
      :keymaps 'neotree-mode-map
      "RET"       'neotree-enter
      "TAB"       'neotree-quick-look
      "H"         'neotree-hidden-file-toggle
      "q"         'neotree-hide
      "r"         'neotree-rename-node)
    :config
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

vim like fringe
#+begin_src emacs-lisp
  (use-package vi-tilde-fringe :ensure t
    :config
    (global-vi-tilde-fringe-mode))
#+end_src

beautiful icons 
makes sure you first use "all-the-icons-install" in a new computer
#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)
#+end_src

org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+end_src
* Customization
** Backup
backup every saved file
#+begin_src emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist `(("." . "~/.saves/")) 
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 5
   version-control t)
#+end_src

backup undo tree
#+begin_src emacs-lisp
  (global-undo-tree-mode)
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo/")))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package smart-mode-line :ensure t
    :config (sml/setup)
    (setq rm-blacklist
	  '(" hl-p" " Helm" " ~" " Anzu" " GitGutter" " ARev" " yas" " WK" "
    compnay" " Undo-Tree" " Fill" " 80col" " es" " SP"))) 
#+end_src
#+begin_src emacs-lisp
;;  (use-package spaceline-all-the-icons :ensure t
;;    :config
;;    (spaceline-all-the-icons--setup-anzu)            ;; Enable anzu searching
;;    (spaceline-all-the-icons--setup-package-updates) ;; Enable package update indicator
;;    (spaceline-all-the-icons--setup-git-ahead)       ;; Enable # of commits ahead of upstream in git
;;    (spaceline-all-the-icons--setup-paradox)         ;; Enable Paradox mode line
;;    (spaceline-all-the-icons--setup-neotree)         ;; Enable Neotree mode line
;;    (spaceline-all-the-icons-theme))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 2
	  dashboard-show-shortcuts nil
	  dashboard-set-heading-icons t
	  dashboard-set-file-icons t
	  dashboard-items '((recents . 5)
			    (projects . 5)
			    (agenda . 5))
	  )
    )

#+end_src
** Theme
#+BEGIN_SRC emacs-lisp 
  (use-package base16-theme
    :ensure t
    :config
    (load-theme 'base16-material))
#+END_SRC
base16-harmonic-dark - nice for bright places
** Font
   visit machine config
#+BEGIN_SRC emacs-lisp 
  ;; (set-face-attribute 'default nil
  ;; 		    :family "fira code"
  ;; 		    :height 130)
#+END_SRC
** Misc
Remove default emacs menus
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1) 
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

Change yes or no to y or n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Setting vim like scrolling
#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 10000)
#+end_src
nice defaults
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'prog-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 80)		; toggle wrapping text at the 80th character
  (setq ring-bell-function 'ignore)	; stop the ringing
#+end_src
Test for org mode specific keys.
You can find what keymap is being for key by using C-h k and typing the key
#+BEGIN_SRC emacs-lisp
#+END_SRC

* TODO things
** fix python BeautifulSoup problem
[[https://emacs.stackexchange.com/questions/13989/inferior-python-shell-slow-crash-on-long-lines][try this]]
** create modeline
[[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][this]] with [[https://github.com/Malabarba/smart-mode-line][that]]
** remove minor modes from sml
* TODO issues
** backups don't work on main computer
